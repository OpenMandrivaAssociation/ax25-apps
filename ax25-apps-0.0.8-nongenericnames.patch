diff -p -up ./call/Makefile.am.wally ./call/Makefile.am
--- ./call/Makefile.am.wally	2001-04-10 03:58:42.000000000 +0200
+++ ./call/Makefile.am	2010-10-08 13:41:04.000000000 +0200
@@ -5,15 +5,15 @@ installconf:
 	$(mkinstalldirs) $(DESTDIR)$(etcdir)
 
 
-bin_PROGRAMS = call
+bin_PROGRAMS = axcall
 
-man_MANS = call.1
+man_MANS = axcall.1
 
 EXTRA_DIST = $(man_MANS)
 
-call_LDADD = $(NCURSES_LIB) $(AX25_LIB)
+axcall_LDADD = $(NCURSES_LIB) $(AX25_LIB)
 
-call_SOURCES =		\
+axcall_SOURCES =		\
 	call.c		\
 	call.h		\
 	menu.c		\
diff -p -up ./call/axcall.1.wally ./call/axcall.1
--- ./call/axcall.1.wally	2010-10-08 13:41:04.000000000 +0200
+++ ./call/axcall.1	2010-10-08 13:41:04.000000000 +0200
@@ -0,0 +1,178 @@
+.TH AXCALL 1 "27 August 1996" Linux "Linux Programmer's Manual"
+.SH NAME
+axcall \- make an AX.25, NET/ROM or Rose connection.
+.SH SYNOPSIS
+For AX.25
+.br
+.B axcall [-b l|e] [-d] [-h] [-m s|e] [-p paclen] [-r] [-t] [-v] [-w window] port callsign [[via] digipeaters.....]
+.sp 1
+For NET/ROM
+.br
+.B axcall [-d] [-h] [-p paclen] [-r] [-t] [-v] port callsign
+.sp 1
+For Rose
+.br
+.B axcall [-d] [-h] [-r] [-t] [-v] port callsign address [[via] digipeater]
+.br
+.SH DESCRIPTION
+.LP
+.B Axcall
+is the general purpose AX.25, NET/ROM and Rose connection program. As is normal
+in AX.25 it runs entirely in line mode. All CR/LF translation is done
+transparently. The program provides ASCII, YAPP, YAPP-C and 7+ file
+transfer facilities. Some of the options are only valid in AX.25 mode,
+the program will quietly ignore them if given in NET/ROM mode or in Rose
+mode.
+.LP
+This version of
+.B axcall
+incorporates many changes that include a much improved user interface. The
+port name is mandatory and is the name of the port which the connection will
+be made on. The port name may be either an AX.25, a NET/ROM port or a Rose
+port,
+.B axcall
+will determine which automatically.
+.LP
+When using NET/ROM the use of digipeaters is meaningless and is not
+supported. However when using Rose up to one digipeater may be specified, as
+well as the Rose address of the distant node and the callsign of the remote
+station. The Rose address must be ten digits long and it must exist in the
+Rose node tables. For Rose connects to work
+.B axparms
+must have been used to set a callsign/uid mapping for the userid in use.
+.SH OPTIONS
+.TP 10
+.BI "\-b l|e"
+Sets the method of backoff to use with AX.25 connections. The default is
+taken from the port specification, but can be overridden by this option.
+Valid values are
+.B l
+for linear backoff, and
+.B e
+for exponential backoff.
+.TP 10
+.BI \-d
+Turn on socket level debugging.
+.TP 10
+.BI \-h
+Selects Slave mode.
+.TP 10
+.BI "\-m s|e"
+Sets the AX.25 mode to use. The default is taken from the port
+specification, but can be overridden by this option. Valid values are
+.B s
+for normal (modulus 8) AX.25 operation, or
+.B e
+for extended (modulus 128) AX.25 operation.
+.TP 10
+.BI "\-p paclen"
+Specify a specific maximum amount of data to be sent in each AX.25 packet. 
+.TP 10
+.BI \-r
+Selects Raw mode.
+.TP 10
+.BI \-t
+Selects Talk mode.
+.TP 10
+.BI \-v
+Display the version.
+.TP 10
+.BI "\-w window"
+Specify a specific AX.25 window for this connection. Only valid in AX.25 mode.
+.LP
+The axcall program interprets lines beginning with a '~' specially.
+The following '~' escapes are available.
+.TP 16
+.BI ~?
+List escapes
+.TP 16
+.BI ~~
+A ~ symbol
+.TP 16
+.BI ~.
+Close connection
+.TP 16
+.BI "~! [command]"
+Run a command
+.TP 16
+.BI ~0
+Change to Raw mode
+.TP 16
+.BI ~1
+Change to Slave mode
+.TP 16
+.BI ~2
+Change to Talk mode
+.TP 16
+.BI ~a
+Start a file transfer (Autobin)
+.TP 16
+.BI ~b
+Start a file transfer (Binary)
+.TP 16
+.BI ~c
+Close the logfile
+.TP 16
+.BI ~h
+List escapes
+.TP 16
+.BI "~o [filename]"
+Open a logfile (default 'logfile.txt')
+.TP 16
+.BI ~r
+Reconnect to remote station
+.TP 16
+.BI ~s
+Stop an upload
+.TP 16
+.BI "~u [filename]"
+Upload a file (ASCII upload)
+.TP 16
+.BI "~yu [filename]"
+Upload a file (YAPP upload)
+.TP 16
+.BI "~yd [filename]"
+Download a file (YAPP download)
+.TP 16
+.BI ~z
+Suspend program
+.LP
+The program provides no terminal emulation features. These are left
+up to the console facilities of the terminal in use. The program is 
+however '8 bit clean'.
+.SH FILES
+.nf
+/proc/net/nr_nodes
+.br
+/proc/net/rose_nodes
+.br
+/etc/ax25/axports
+.br
+/etc/ax25/nrports
+.br
+/etc/ax25/rsports
+.fi
+.SH "SEE ALSO"
+.BR axlisten (1),
+.BR mheard (1),
+.BR ax25 (4),
+.BR netrom (4),
+.BR rose (4),
+.BR axports (5),
+.BR nrports (5),
+.BR rsports (5),
+.BR axparms (8),
+.BR nrparms (8),
+.BR rsparms (8).
+.SH AUTHORS
+.nf
+Alexander Tietzel DG6XA <TIETZE_A@etech.fh-hamburg.de>
+.br
+Joerg Reuter DL1BKE <jreuter@poboxes.com>
+.br
+Alan Cox GW4PTS <alan@cymru.net>
+.br
+Jonathan Naylor G4KLX <g4klx@g4klx.demon.co.uk>
+.br
+Steve Henson G6IXS <shenson@nyx.cs.du.edu>
+.fi
diff -p -up ./call/call.c.wally ./call/call.c
--- ./call/call.c.wally	2009-06-21 16:09:49.000000000 +0200
+++ ./call/call.c	2010-10-08 13:47:50.000000000 +0200
@@ -109,7 +109,7 @@ typedef struct {
 
 void usage(void)
 {
-	fprintf(stderr, "usage: call [-b l|e] [-d] [-h] [-m s|e] [-p paclen] [-r] [-s mycall] [-t] [-v] [-w window] port callsign [[via] digipeaters...]\n");
+	fprintf(stderr, "usage: axcall [-b l|e] [-d] [-h] [-m s|e] [-p paclen] [-r] [-s mycall] [-t] [-v] [-w window] port callsign [[via] digipeaters...]\n");
 	exit(1);
 }
 
@@ -173,7 +173,7 @@ static int nr_convert_call(char *address
 
 	if ((fp = fopen(PROC_NR_NODES_FILE, "r")) == NULL) {
 		fprintf(stderr,
-			"call: NET/ROM not included in the kernel\n");
+			"axcall: NET/ROM not included in the kernel\n");
 		return -1;
 	}
 	fgets(buffer, 100, fp);
@@ -193,7 +193,7 @@ static int nr_convert_call(char *address
 
 	fclose(fp);
 
-	fprintf(stderr, "call: NET/ROM callsign or alias not found\n");
+	fprintf(stderr, "axcall: NET/ROM callsign or alias not found\n");
 
 	return -1;
 }
@@ -213,7 +213,7 @@ static int connect_to(char *address[])
 	case AF_ROSE:
 		if (address[0] == NULL || address[1] == NULL) {
 			fprintf(stderr,
-				"call: too few arguments for Rose\n");
+				"axcall: too few arguments for Rose\n");
 			return (-1);
 		}
 		if ((fd = socket(AF_ROSE, SOCK_SEQPACKET, 0)) < 0) {
@@ -225,7 +225,7 @@ static int connect_to(char *address[])
 	case AF_NETROM:
 		if (address[0] == NULL) {
 			fprintf(stderr,
-				"call: too few arguments for NET/ROM\n");
+				"axcall: too few arguments for NET/ROM\n");
 			return (-1);
 		}
 		if ((fd = socket(AF_NETROM, SOCK_SEQPACKET, 0)) < 0) {
@@ -240,7 +240,7 @@ static int connect_to(char *address[])
 	case AF_AX25:
 		if (address[0] == NULL) {
 			fprintf(stderr,
-				"call: too few arguments for AX.25\n");
+				"axcall: too few arguments for AX.25\n");
 			return (-1);
 		}
 		if ((fd = socket(AF_AX25, SOCK_SEQPACKET, 0)) < 0) {
@@ -329,7 +329,7 @@ static int connect_to(char *address[])
 			if (strcasecmp(address[2], "VIA") == 0) {
 				if (address[3] == NULL) {
 					fprintf(stderr,
-						"call: callsign must follow 'via'\n");
+						"axcall: callsign must follow 'via'\n");
 					close(fd);
 					return (-1);
 				}
@@ -2208,7 +2208,7 @@ int main(int argc, char **argv)
 		case 'b':
 			if (*optarg != 'e' && *optarg != 'l') {
 				fprintf(stderr,
-					"call: invalid argument for option '-b'\n");
+					"axcall: invalid argument for option '-b'\n");
 				return 1;
 			}
 			backoff = *optarg == 'e';
@@ -2222,7 +2222,7 @@ int main(int argc, char **argv)
 		case 'm':
 			if (*optarg != 's' && *optarg != 'e') {
 				fprintf(stderr,
-					"call: invalid argument for option '-m'\n");
+					"axcall: invalid argument for option '-m'\n");
 				return 1;
 			}
 			ax25mode = *optarg == 'e';
@@ -2230,12 +2230,12 @@ int main(int argc, char **argv)
 		case 'p':
 			if ((paclen = atoi(optarg)) == 0) {
 				fprintf(stderr,
-					"call: option '-p' requires a numeric argument\n");
+					"axcall: option '-p' requires a numeric argument\n");
 				return 1;
 			}
 			if (paclen < 1 || paclen > 500) {
 				fprintf(stderr,
-					"call: paclen must be between 1 and 500\n");
+					"axcall: paclen must be between 1 and 500\n");
 				return 1;
 			}
 			break;
@@ -2252,24 +2252,24 @@ int main(int argc, char **argv)
 			mode = TALKMODE;
 			break;
 		case 'v':
-			printf("call: %s\n", VERSION);
+			printf("axcall: %s\n", VERSION);
 			return 0;
 		case 'w':
 			if ((window = atoi(optarg)) == 0) {
 				fprintf(stderr,
-					"call: option '-w' requires a numeric argument\n");
+					"axcall: option '-w' requires a numeric argument\n");
 				return 1;
 			}
 			if (ax25mode) {
 				if (window < 1 || window > 63) {
 					fprintf(stderr,
-						"call: window must be between 1 and 63 frames\n");
+						"axcall: window must be between 1 and 63 frames\n");
 					return 1;
 				}
 			} else {
 				if (window < 1 || window > 7) {
 					fprintf(stderr,
-						"call: window must be between 1 and 7 frames\n");
+						"axcall: window must be between 1 and 7 frames\n");
 					return 1;
 				}
 			}
@@ -2297,7 +2297,7 @@ int main(int argc, char **argv)
 
 			if (rs_config_get_addr(port) == NULL) {
 				fprintf(stderr,
-					"call: invalid port setting\n");
+					"axcall: invalid port setting\n");
 				return 1;
 			} else {
 				af_mode = AF_ROSE;
diff -p -up ./call/listen.1.wally ./call/listen.1
--- ./call/listen.1.wally	2010-10-08 13:41:04.000000000 +0200
+++ ./call/listen.1	2010-10-08 13:41:04.000000000 +0200
@@ -0,0 +1,89 @@
+.TH LISTEN 1 "27 August 1996" Linux "Linux Programmer's Manual"
+.SH NAME
+listen \- monitor AX.25 traffic
+.SH SYNOPSIS
+.B listen [-8] [-a] [-c] [-h] [-i] [-p port] [-r] [-t] [-v]
+.SH DESCRIPTION
+.LP
+.B Listen
+uses SOCK_PACKET facilities to provide a network monitor of all AX.25
+traffic heard by the system. Since KISS is implicitly promiscuous no
+special driver configurations are needed.
+.LP
+This version displays standard AX.25, PE1CHL extended AX.25, NET/ROM, Rose, ARP,
+IP, ICMP, TCP and UDP. It also displays IP, TCP, ICMP, TCP and UDP
+encapsulated within NET/ROM frames. The program also displays AX.25 and IP
+encapsulated within an IP frame, but see RFC1326 for reasons not to do so.
+.LP
+.B Listen
+makes an attempt at decoding some of the more common routing protocols. RSPF
+and RIP (both \(lqnormal\(rq and G8BPQs RIP98) are traced. JNOS style
+NET/ROM node polls are also displayed.
+.LP
+.B Listen
+can use colors to make the output more readable. The ncurses library is used
+to accomplish this. 
+.B Color support defaults to being disabled,
+and the 
+.BR -c
+parameter is used to enable it.
+.SH OPTIONS
+.TP 10
+.BI \-8
+Indicates that the terminal is capable of printing 8-bit characters. This 
+parameter is required for the -i parameter to work.
+.TP 10
+.BI \-a
+Allow for the monitoring of outgoing frames as well as incoming ones.
+.TP 10
+.BI \-c
+Enable color support.
+.TP 10
+.BI \-h
+Dump the data portion of the packet in both hexadecimal and ASCII. The
+default is to display data as ASCII only.
+.TP 10
+.BI \-i
+Map IBM codepage 437 characters 128-158 to their ISO-Latin-1 equivalents.
+This is a hack for scandinavian users. This parameter is only valid
+when used with the -8 and -c parameters.
+.TP 10
+.BI "\-p port"
+Monitor only those frames received on a particular port, by default all
+AX.25 devices are monitored.
+.TP 10
+.BI \-r
+Dump the data portion in a "readable" fashion, which is more suitable
+for tracing plaintext AX.25 traffic. CR-LF conversion is done.
+.TP 10
+.BI \-t
+Displays a timestamp with each packet received.
+.TP 10
+.BI \-v
+Display the version.
+.SH FILES
+/etc/ax25/axports
+.SH "SEE ALSO"
+.BR call (1),
+.BR mheard (1),
+.BR beacon (1),
+.BR ax25 (4),
+.BR netrom (4),
+.BR rose (4),
+.BR kissattach (8).
+.LP
+.SH BUGS
+.B Listen
+does not validate the checksums of frames that support them (ie IP),
+therefore corrupt frames will be displayed with bogus values. The MSS
+of a TCP frame that contains that option is not displayed.
+.SH AUTHORS
+.nf
+Alan Cox GW4PTS <alan@cymru.net>
+.br
+Jonathan Naylor G4KLX <g4klx@g4klx.demon.co.uk>
+.br
+Phil Karn KA9Q <karn@qualcomm.com>
+.br
+Heikki Hannikainen OH7LZB <hessu@pspt.fi>
+.fi
diff -p -up ./listen/Makefile.am.wally ./listen/Makefile.am
--- ./listen/Makefile.am.wally	2004-02-04 11:48:28.000000000 +0100
+++ ./listen/Makefile.am	2010-10-08 13:41:04.000000000 +0200
@@ -1,15 +1,15 @@
 
 installconf:
 
-bin_PROGRAMS = listen
+bin_PROGRAMS = axlisten
 
-man_MANS = listen.1
+man_MANS = axlisten.1
 
 EXTRA_DIST = $(man_MANS) 
 
 LDADD = $(AX25_LIB) $(NCURSES_LIB)
 
-listen_SOURCES = 	\
+axlisten_SOURCES = 	\
 	listen.c	\
 	listen.h	\
 	kissdump.c	\
diff -p -up ./listen/axlisten.1.wally ./listen/axlisten.1
--- ./listen/axlisten.1.wally	2010-10-08 13:41:04.000000000 +0200
+++ ./listen/axlisten.1	2010-10-08 13:41:04.000000000 +0200
@@ -0,0 +1,89 @@
+.TH AXLISTEN 1 "27 August 1996" Linux "Linux Programmer's Manual"
+.SH NAME
+axlisten \- monitor AX.25 traffic
+.SH SYNOPSIS
+.B axlisten [-8] [-a] [-c] [-h] [-i] [-p port] [-r] [-t] [-v]
+.SH DESCRIPTION
+.LP
+.B Axlisten
+uses SOCK_PACKET facilities to provide a network monitor of all AX.25
+traffic heard by the system. Since KISS is implicitly promiscuous no
+special driver configurations are needed.
+.LP
+This version displays standard AX.25, PE1CHL extended AX.25, NET/ROM, Rose, ARP,
+IP, ICMP, TCP and UDP. It also displays IP, TCP, ICMP, TCP and UDP
+encapsulated within NET/ROM frames. The program also displays AX.25 and IP
+encapsulated within an IP frame, but see RFC1326 for reasons not to do so.
+.LP
+.B Axlisten
+makes an attempt at decoding some of the more common routing protocols. RSPF
+and RIP (both \(lqnormal\(rq and G8BPQs RIP98) are traced. JNOS style
+NET/ROM node polls are also displayed.
+.LP
+.B Axlisten
+can use colors to make the output more readable. The ncurses library is used
+to accomplish this. 
+.B Color support defaults to being disabled,
+and the 
+.BR -c
+parameter is used to enable it.
+.SH OPTIONS
+.TP 10
+.BI \-8
+Indicates that the terminal is capable of printing 8-bit characters. This 
+parameter is required for the -i parameter to work.
+.TP 10
+.BI \-a
+Allow for the monitoring of outgoing frames as well as incoming ones.
+.TP 10
+.BI \-c
+Enable color support.
+.TP 10
+.BI \-h
+Dump the data portion of the packet in both hexadecimal and ASCII. The
+default is to display data as ASCII only.
+.TP 10
+.BI \-i
+Map IBM codepage 437 characters 128-158 to their ISO-Latin-1 equivalents.
+This is a hack for scandinavian users. This parameter is only valid
+when used with the -8 and -c parameters.
+.TP 10
+.BI "\-p port"
+Monitor only those frames received on a particular port, by default all
+AX.25 devices are monitored.
+.TP 10
+.BI \-r
+Dump the data portion in a "readable" fashion, which is more suitable
+for tracing plaintext AX.25 traffic. CR-LF conversion is done.
+.TP 10
+.BI \-t
+Displays a timestamp with each packet received.
+.TP 10
+.BI \-v
+Display the version.
+.SH FILES
+/etc/ax25/axports
+.SH "SEE ALSO"
+.BR axcall (1),
+.BR mheard (1),
+.BR beacon (1),
+.BR ax25 (4),
+.BR netrom (4),
+.BR rose (4),
+.BR kissattach (8).
+.LP
+.SH BUGS
+.B Axlisten
+does not validate the checksums of frames that support them (ie IP),
+therefore corrupt frames will be displayed with bogus values. The MSS
+of a TCP frame that contains that option is not displayed.
+.SH AUTHORS
+.nf
+Alan Cox GW4PTS <alan@cymru.net>
+.br
+Jonathan Naylor G4KLX <g4klx@g4klx.demon.co.uk>
+.br
+Phil Karn KA9Q <karn@qualcomm.com>
+.br
+Heikki Hannikainen OH7LZB <hessu@pspt.fi>
+.fi
diff -p -up ./listen/listen.c.wally ./listen/listen.c
--- ./listen/listen.c.wally	2009-06-21 16:09:49.000000000 +0200
+++ ./listen/listen.c	2010-10-08 13:41:04.000000000 +0200
@@ -94,25 +94,25 @@ int main(int argc, char **argv)
 			timestamp = 1;
 			break;
 		case 'v':
-			printf("listen: %s\n", VERSION);
+			printf("axlisten: %s\n", VERSION);
 			return 0;
 		case ':':
 			fprintf(stderr,
-				"listen: option -p needs a port name\n");
+				"axlisten: option -p needs a port name\n");
 			return 1;
 		case '?':
 			fprintf(stderr,
-				"Usage: listen [-8] [-a] [-c] [-h] [-i] [-p port] [-r] [-t] [-v]\n");
+				"Usage: axlisten [-8] [-a] [-c] [-h] [-i] [-p port] [-r] [-t] [-v]\n");
 			return 1;
 		}
 	}
 
 	if (ax25_config_load_ports() == 0)
-		fprintf(stderr, "listen: no AX.25 port data configured\n");
+		fprintf(stderr, "axlisten: no AX.25 port data configured\n");
 
 	if (port != NULL) {
 		if ((dev = ax25_config_get_dev(port)) == NULL) {
-			fprintf(stderr, "listen: invalid port name - %s\n",
+			fprintf(stderr, "axlisten: invalid port name - %s\n",
 				port);
 			return 1;
 		}
